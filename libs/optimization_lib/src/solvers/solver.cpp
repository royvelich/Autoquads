#include <solvers/solver.h>Solver::Solver(int maxIterations, double solveResidual, int maxLineSearchIterations)	: maxIterations(maxIterations), solveResidual(solveResidual), maxLineSearchIterations(maxLineSearchIterations) {}Solver::~Solver() {}int Solver::getLastIterations() { return lastIterations; }bool Solver::minimize(ObjectiveFunction *function, Eigen::VectorXd &x) {	//number of parameters...	int N = (int)x.size();	xi.resize(N);	dx.resize(N);	xi = x;	bool optimizationConverged = false;	int i = 0;	for (; i < maxIterations; i++) {		computeSearchDirection(function, xi, dx);		if (dx.norm() < solveResidual) {			optimizationConverged = true;			break;		}		doLineSearch(function, dx, xi);	}	lastIterations = i;	//p now holds the parameter values at the start of the iteration...	x = xi;	//and done!	return optimizationConverged;}void Solver::doLineSearch(ObjectiveFunction *function, const VectorXd& dx, VectorXd& xi){	double alfa = 1;	double curr = function->computeValue(xi);	int round = 0;	while (curr < function->computeValue(xi + alfa * dx))	{		alfa /= 2;	}	curr = function->computeValue(xi + alfa * dx);	alfa /= 2;	while ((round < maxLineSearchIterations) & (curr > function->computeValue(xi + alfa * dx)))	{		curr = function->computeValue(xi + alfa * dx);		alfa /= 2;		round++;	}	alfa *= 2;	xi = xi + alfa * dx;}