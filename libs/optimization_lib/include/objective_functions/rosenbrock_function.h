#pragma once#include <objective-functions/objective-function.h>#include <iostream>using namespace std;class RosenbrockFunction : public ObjectiveFunction {public:	RosenbrockFunction() {		a = 1; b = 100;	}	virtual double computeValue(const VectorXd& x) {		// Ex 1.1		// return f(x)		// f(x) = (a - x)^2 + b(y-x^2)^2		double l = pow((a - x[0]), 2);		double r = b * pow((x[1] - pow(x[0], 2)), 2);		double result = l + r;		return  result;	}	virtual void addGradientTo(VectorXd& grad, const VectorXd& x) {		// Ex 1.1		// write df/dx in `grad`		grad.resize(x.size());		grad[0] = -2 * a + 2 * x[0] - 4 * b*x[0] * x[1] + 4 * b*pow(x[0], 3);		grad[1] = 2 * b* (x[1] - pow(x[0], 2));	}	virtual void addHessianEntriesTo(std::vector<Tripletd>& hessianEntries, const VectorXd& x) {		// Ex 1.2		// write d^2f/dx^2 in `hessianEntries`		double Dxx = 2 - 4 * b*x[1] + 12 * b*pow(x[0], 2);		double Dyx = -4 * b*x[0];		double Dyy = 2 * b;		hessianEntries.clear();		hessianEntries.push_back(Tripletd(0, 0, Dxx));		hessianEntries.push_back(Tripletd(0, 1, Dyx));		hessianEntries.push_back(Tripletd(1, 0, Dyx));		hessianEntries.push_back(Tripletd(1, 1, Dyy));	}	double a, b;};