#pragma once#include <objective_functions/objective_function.h>#include <cmath>#include <cfloat>#include <igl/igl_inline.h>#include <igl/project.h>#include <algorithm>#include <sstream>#include <string>#include <iostream>#define EPSILON 1e-5#define MAX_ITERATIONS 100#define MAX_Line_Search_ITERATIONS 15using namespace std;using namespace Eigen;class Solver {public:	Solver(int maxIterations = MAX_ITERATIONS, double solveResidual = EPSILON, int maxLineSearchIterations = MAX_Line_Search_ITERATIONS);	virtual ~Solver();	int getLastIterations();	virtual bool minimize(ObjectiveFunction *function, Eigen::VectorXd &x);	virtual void computeSearchDirection(ObjectiveFunction *function, const VectorXd &x, VectorXd& dx) = 0;	virtual void doLineSearch(ObjectiveFunction *function, const VectorXd& dx, VectorXd& xi);protected:	double solveResidual;	int maxIterations;	int maxLineSearchIterations;	VectorXd xi, dx;	// some stats about the last time `minimize` was called	int lastIterations = -1;};